[⚠️ Suspicious Content] ---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import Button from '~/components/ui/Button.astro';
import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash, getAsset } from '~/utils/permalinks';
import type { CallToAction } from '~/types';

interface Link {
  text: string;
  href: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [
    { text: 'Inicio', href: getHomePermalink() },
    {
      text: 'Servicios',
      href: '/servicios',
      links: [
        { text: 'Desarrollo Web', href: '/servicios/desarrollo-web' },
        { text: 'Aplicaciones Móviles', href: '/servicios/app-movil' },
        { text: 'Diseño UI/UX', href: '/servicios/ui-ux' },
        { text: 'Consultoría IT', href: '/servicios/consultoria-it' }
      ]
    },
    { text: 'Portfolio', href: '/portfolio' },
    { text: 'Nosotros', href: '/nosotros' },
    { text: 'Blog', href: '/blog' },
    { text: 'Contacto', href: '/contacto' }
  ],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center'
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out',
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative text-default py-3 px-3 md:px-6 mx-auto w-full',
      { 'md:flex md:justify-between': position !== 'center' },
      { 'md:grid md:grid-cols-3 md:items-center': position === 'center' },
      { 'max-w-7xl': !isFullWidth },
    ]}
  >
    <!-- Logo & Mobile Toggle -->
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu />
      </div>
    </div>

    <!-- Navigation Links -->
    <nav
      class="items-center w-full md:w-auto hidden md:flex md:mx-5 text-default overflow-y-auto overflow-x-hidden md:overflow-auto md:justify-self-center"
      aria-label="Main navigation"
    >
      <ul class="flex flex-col md:flex-row w-full md:w-auto text-lg font-medium md:justify-center">
        {links.map(({ text, href, links }) => (
          <li class={links?.length ? 'relative group' : ''}>
            {links?.length ? (
              <>
                <button
                  type="button"
                  class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap"
                >
                  {text}
                  <Icon name="tabler:chevron-down" class="w-4 h-4 ml-1 hidden md:inline" />
                </button>
                <!-- Dropdown Menu -->
                <ul class="absolute left-0 mt-2 bg-white dark:bg-gray-800 rounded shadow-lg opacity-0 group-hover:opacity-100 transition-opacity">
                  {links.map(({ text: subText, href: subHref }) => (
                    <li>
                      <a
                        href={subHref}
                        class:list={[
                          'block px-4 py-2 text-base hover:bg-gray-100 dark:hover:bg-gray-700 whitespace-nowrap',
                          { 'text-link font-semibold': subHref === currentPath }
                        ]}
                      >
                        {subText}
                      </a>
                    </li>
                  ))}
                </ul>
              </>
            ) : (
              <a
                href={href}
                class:list={[
                  'hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap',
                  { 'text-link font-semibold': href === currentPath }
                ]}
              >
                {text}
              </a>
            )}
          </li>
        ))}
      </ul>
    </nav>

    <!-- Actions & Theme Toggle -->
    <div class:list={[{ 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' }, 'hidden md:flex items-center space-x-4']}>
      {showToggleTheme && <ToggleTheme iconClass="w-6 h-6" />}
      {actions.length > 0 && (
        <div class="flex space-x-3">
          {actions.map((btnProps) => (
            <Button {...btnProps} class="py-2 px-5 text-sm font-semibold" />
          ))}
        </div>
      )}
    </div>
  </div>
</header>  
